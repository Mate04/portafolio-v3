---
import "../../../styles/global.css";
import type { DataJSON } from "../../../data/info.type";
import Layout from "../../../layouts/Layout.astro";

// Enumeramos los locales válidos para generar las rutas estáticas.
export function getStaticPaths() {
  return [{ params: { locale: "es" } }, { params: { locale: "en" } }];
}
import WorkExperience from "../../../components/cv/profesional-experience.astro";
import Skills from "../../../components/cv/skills-cv.astro";
import EducationExperience from '../../../components/cv/education-experience.astro'
import Section from '../../../components/cv/section-cv.astro'
import Contact from '../../../components/cv/contact-cv.astro'

import { getLangFromUrl, useTranslations } from "../../../utils/languaje.utils";

const { locale } = Astro.params;

const informacion: DataJSON = await import(
  `../../../data/info-me-${locale}.json`
).then((mod) => mod.default);

const {
  nombre,
  descripcionPerfilExtensa,
  experienciasLaborales,
  habilidades,
  habilidadesBlandas,
  contacto,
  educacion
} = informacion;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---

<Layout>
  <div class="cv-container">
    <div class="mb-4">
      <h1 class="text-4xl font-bold">{nombre}</h1>
      <Contact contacto={contacto.redesSociales} place={contacto.ciudadPais} />
        
      {/*<hr class="mt-2 border-t border-gray-300 dark:border-gray-600" />*/}
    </div>
    <Section title={t("perfil")}>
    <p class="cv-description ">{descripcionPerfilExtensa}</p>
    </Section>
  </div>
  <div class="cv-container mt-8">
    <WorkExperience experienciaLaboral={experienciasLaborales} />
  </div>
  <div class="cv-container mt-8">
    <Skills hardSkills={habilidades} softSkills={habilidadesBlandas} />
  </div>
  <div class="cv-container mt-8">
    <EducationExperience experienciaLaboral={educacion}/>
  </div>
</Layout>

<script>
  if (typeof window !== "undefined") {
    const params = new URLSearchParams(window.location.search);
    if (params.get("print") === "1") {
      // Si viene de iframe (embedded=1) imprimimos automáticamente sin pedir foco
      const isEmbedded = params.get("embedded") === "1";
      // Esperar a que cargue estilos y fuentes
      window.addEventListener("load", () => {
        setTimeout(() => {
          window.print();
          // Cerrar automáticamente si es popup (no iframe) y se abrió solo para imprimir
          if (
            !isEmbedded &&
            window.matchMedia("(display-mode: browser)").matches
          ) {
            // Pequeño delay para permitir al diálogo abrirse primero en algunos navegadores
            setTimeout(() => window.close(), 1500);
          }
        }, 50);
      });
    }
  }
</script>

<style>
  body {
    font-family: "Proxima Nova", sans-serif;
    line-height: 1.6;
  }
</style>
