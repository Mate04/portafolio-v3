---
// Button.astro
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "../lib/utils"; // Asegúrate de tener este helper, si no te lo paso

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 cursor-pointer",
  {
    variants: {
      variant: {
        default: "bg-black text-white hover:bg-neutral-800",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-gray-200 bg-white text-gray-700 hover:bg-gray-100 hover:text-gray-900",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        white: "bg-white text-black hover:bg-gray-100 border border-gray-300", // ⬅️ NUEVO
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

// Tipado de props para el botón
interface ButtonProps extends VariantProps<typeof buttonVariants> {
  type?: "button" | "submit" | "reset";
  className?: string;
  disabled?: boolean;
  [key: string]: any;
  onClick?: () => void;
}

const {
  variant = "default",
  size = "default",
  className = "",
  type = "button",
  disabled = false,
  onClick = () => {},
  ...rest
} = Astro.props as ButtonProps;

const classes = cn(buttonVariants({ variant, size }), className);
---

<button
  class={classes}
  type={type}
  disabled={disabled}
  {...rest}
>
  <slot />
</button>
