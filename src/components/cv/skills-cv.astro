---
import type { Skills, Languaje } from "../../data/info.type";
import { getLangFromUrl, useTranslations } from "../../utils/languaje.utils";
import Section from "./section-cv.astro";

interface Props {
  hardSkills: Skills;
  softSkills: string[];
  languajes: Languaje;
}

const { hardSkills: skills, softSkills, languajes } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Preprocesar habilidades agrupándolas por la primera área
type GroupedSkills = { area: string; skills: string[] };
let groupedSkills: GroupedSkills[] = [];
if (skills && skills.length) {
  const map = new Map<string, string[]>();
  for (const s of skills) {
    if (!s?.areas?.length) continue;
    const area = s.areas[0];
    if (!map.has(area)) map.set(area, []);
    map.get(area)!.push(s.nombre);
  }
  groupedSkills = Array.from(map, ([area, list]) => ({ area, skills: list }));
}
---

<Section title={t("Skills")}>
  <div>
    <h2 class="uppercase font-semibold text-base tracking-wide mb-1">
      {t("hard-skills")}
    </h2>
    {
      groupedSkills.length > 0 && (
        <div class="space-y-1 leading-snug">
          {groupedSkills.map((g) => (
            <p>
              <span class="font-semibold">{g.area}:</span> {g.skills.join(", ")}
            </p>
          ))}
        </div>
      )
    }
  </div>
  <div>
    <h2 class="uppercase font-semibold text-base tracking-wide mb-1">
      {t("soft-skills")}
    </h2>
    {
      softSkills && softSkills.length > 0 && (
        <div class="space-y-1 leading-snug">
          {softSkills.map((skill) => (
            <p>{skill}</p>
          ))}
        </div>
      )
    }
  </div>
  <div>
    <h2 class="uppercase font-semibold text-base tracking-wide mb-1">
      {t("languaje")}
    </h2>
    <ul class="leading-snug">
      {
        languajes.map(({ nivel, idioma }) => (
          <li class="">
            {idioma} - {nivel}
          </li>
        ))
      }
    </ul>
  </div>
</Section>
